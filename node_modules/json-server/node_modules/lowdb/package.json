{
  "name": "lowdb",
  "version": "0.3.2",
  "description": "Flat JSON file database",
  "keywords": [
    "flat",
    "file",
    "database",
    "JSON",
    "JSONDatabase",
    "lo-dash",
    "lodash",
    "underscore",
    "underscore.db",
    "embed",
    "embeddable"
  ],
  "main": "lib/index.js",
  "scripts": {
    "test": "grunt mochaTest",
    "prepublish": "grunt build",
    "precommit": "npm test",
    "benchmark": "grunt build && cd benchmark && node index.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/typicode/lowdb.git"
  },
  "author": {
    "name": "Typicode",
    "email": "typicode@gmail.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/typicode/lowdb/issues"
  },
  "homepage": "https://github.com/typicode/lowdb",
  "dependencies": {
    "underscore.db": "~0.6.0",
    "lodash": "~2.4.1"
  },
  "devDependencies": {
    "b": "^2.0.1",
    "grunt": "^0.4.3",
    "grunt-cli": "^0.1.13",
    "grunt-coffeelint": "0.0.8",
    "grunt-contrib-clean": "^0.5.0",
    "grunt-contrib-coffee": "^0.10.1",
    "grunt-contrib-watch": "^0.5.3",
    "grunt-mocha-test": "^0.9.4",
    "husky": "^0.4.3",
    "sinon": "~1.8.2"
  },
  "readme": "# LowDB [![NPM version](https://badge.fury.io/js/lowdb.svg)](http://badge.fury.io/js/lowdb) [![Build Status](https://travis-ci.org/typicode/lowdb.svg)](https://travis-ci.org/typicode/lowdb)\n\n> Flat JSON file database for Node\n\n* Serverless\n* Speedy\n* Evented\n* 50+ methods coming from Lo-Dash\n\nLowDB is built on Lo-Dash, this makes it quite different and unique compared to other serverless databases often based on MongoDB API.\n\n_LowDB powers [JSON Server](https://github.com/typicode/json-server) and [JSONPlaceholder](http://jsonplaceholder.typicode.com/)._\n\n_If you need something similar for the browser, check [Underscore.db](https://github.com/typicode/underscore.db)._\n\n## Usage\n\n```javascript\nvar low = require('lowdb')\nlow('songs').insert({title: 'low!'})\n```\n\nDatabase is automatically created and saved to `db.json` in a readable format.\n\n```javascript\n{\n  \"songs\": [\n    {\n      \"title\": \"low!\",\n      \"id\": \"e31aa48c-a9d8-4f79-9fce-ded4c16c3c4c\"\n    }\n  ]\n}\n```\n\nTo query data, you can use Lo-Dash methods.\n\n```javascript\nvar songs = low('songs').where({ title: 'low!' }).value()\n```\n\nOr LowDB equivalent short syntax.\n\n```javascript\nvar songs = low('songs', { title: 'low!' })\n```\n\nChanges can also be monitored.\n\n```javascript\nlow.on('add', function(name, object) {\n  console.log(object + 'added to' + name)\n})\n```\n\n## Benchmark\n\n```\nget    x 1000    0.837708 ms\nupdate x 1000    4.433322 ms\ninsert x 1000    11.78481 ms\nremove x 1000    24.60179 ms\n```\n\n_To run the benchmark on your machine, clone the project and run `npm install && npm run benchmark`._\n\n## API\n\n__low(collection)__\n\nReturns or create a [Lo-Dash](http://lodash.com/docs) wrapped array.\n\nYou can then use methods like: `where`, `find`, `filter`, `sortBy`, `groupBy`, ... and also methods from [Underscore.db](https://github.com/typicode/underscore.db).\n\n```javascript\nvar topFiveSongs = low('songs')\n  .where({published: true})\n  .sortBy('views')\n  .first(5)\n  .value();\n  \nvar songTitles = low('songs')\n  .pluck('titles')\n  .value()\n  \nvar total = low('songs').size()\n```\n\n_If you just want to modify the database, without getting the returned array or object, you can omit `.value()`_\n\n__low.save([path])__\n\nSaves database to `path` or `low.path`. By default `db.json`.\n\n__low.load([path])__\n\nLoads database from `path` or `low.path`. By default `db.json`.\n\n__low.path__\n\nDatabase location. By default `db.json`.\n\n```javascript\nlow.path = '/some/path/file.json'\n```\n\n__autoSave__\n\nSet to `false` to disable save on change, this turns LowDB into a read-only in-memory database. By default `true`.\n\n```javascript\nlow.autoSave = true\n```\n\n## Events\n\n* add(collectionName, insertedDoc)\n* update(collectionName, updatedDoc, previousDoc)\n* remove(collectionName, removedDoc)\n* change()\n\n## Short syntax\n\nLowDB short syntax covers only the most common operations but lets you write really concise code.\n\n```javascript\nlow('songs', id)\n// == low('songs').get(id).value()\n```\n\n```javascript\nlow('songs', {title: 'low!'})\n// == low('songs').where({title: 'low!'}).value()\n```\n\n```javascript\nlow('songs', {title: 'low!'}, +1)\n// == low('songs').insert({title: 'low!'}).value()\n```\n\n```javascript\nlow('songs', {title: 'low!'}, -1)\n// == low('songs').removeWhere({title: 'low!'}).value()\n```\n\n```javascript\nlow('songs', id, -1)\n// == low('songs').remove(id).value()\n```\n\n```javascript\nlow('songs', id, {title: 'new title'})\n// == low('songs').update(id, {title: 'new title'}).value()\n```\n\n```javascript\nlow('songs', {published: false}, {published: true})\n// == low('songs').updateWhere({published: false}, {published: true}).value()\n```\n\n## FAQ\n\n__How is database saved?__\n\nDatabase is only saved to disk when you call `insert`, `update`, `updateWhere`, `remove`, `removeWhere`.\nAlso writing is synchronous but throttled to keep things fast. \n\nHere's an example to illustrate:\n\n```javascript\nlow('posts').insert({ title: 'foo' }) // database is persisted synchronously\nlow('posts').insert({ title: 'foo' }) // database is not persisted\nlow('posts').insert({ title: 'foo' }) // database is not persisted\n// 100 ms later database will be persisted synchronously\n```\n\nSo in 1 second, LowDB will make, at most, 10 synchronous writes.\n\n_Future versions of LowDB may be fully asynchronous._\n\n__Does it support concurrency?__\n\nYes. Node being single threaded and changes to database being synchronously written, there's no risk of having concurrency problems.\n\n## License\n\nLowDB is released under the MIT License.\n",
  "readmeFilename": "README.md",
  "_id": "lowdb@0.3.2",
  "dist": {
    "shasum": "a620d56703e6fe7cc21a9df2fe097734bcea3d39"
  },
  "_from": "lowdb@^0.3.0",
  "_resolved": "https://registry.npmjs.org/lowdb/-/lowdb-0.3.2.tgz"
}
